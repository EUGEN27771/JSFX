desc:Drum Trigger v1a

options:want_all_kb
options:no_meter

//!need .jsfx-inc
import res\Curve3.txt
import res\WaveDisplay3.txt


// -- In-Out sliders ------
slider1:0<-6,12,0.01>Input Gain dB
slider2:-24<-60,5,0.01>Dry Out dB
// -- Detector Sliders ----
slider5:-30<-60,0,0.01>Threshold dB
slider6:7<3,12,0.01>Sensitivity dB
slider7:20<20,250,1>Retrig ms
slider8:5<1,8,0.1>-Velocity Detection ms
// -- MIDI Sliders -------- 
slider9:0<0,11,1{36: C3,37: C#3,38: D3,39: Eb3,40: E3,41: F3,42: F#3,43: G3,44: G#3,45: A3,46: Bb3,47: B3}>MIDI Note
slider10:2<0,3,1{1/4, 1/8, 1/16, 1/32, 1/64}>-Note Length
// -- other ---------------


@init
//------------------------------------------------
ext_noinit = 1;
envOut1 = 0;
envOut2 = 0;
retrig_cnt = 10^5; 

//-- GFX -----------------------------------------
R = 20; G = 20; B = 20;
gfx_clear = R+G*256+B*65536;

//-- mem_offs -(это важно) -- не должны пересекаться!
//-- координаты тоже не должны пересекаться!
//-- И координаты для прикола, нужны нормальные
wave.Init(30,20,744,250, 1000);       // init wave  - (x,y,w,h, mem_offs) 
crv.Curve_Init(795,20,270,250, 0, 4); // init curve - (x,y,w,h, mem_offs, n_pnts)
       

@slider 
// -- можно вынести в init -------------
attack1  = 1/1000;   //1<0.1,5,0.01>-1attack(fast) ms
attack2  = 7/1000;   //7<2,50,0.1>-2attack(slow) ms  
release1 = 10/1000;  //10<0.1,50,0.1>-1release ms 
release2 = 15/1000;  //15<2,50,1>-2release ms
// -- ga, gr coeff -----------
ga1 = exp(-1/(srate*attack1));
gr1 = exp(-1/(srate*release1)); 
ga2 = exp(-1/(srate*attack2));
gr2 = exp(-1/(srate*release2));

// -- IN-OUT sliders - values-----------
In_gain = 10^(slider1/20);
Dry_Out = 10^(slider2/20);

// -- Detector sliders - values --------
Threshold = 10^(slider5/20);
Sensitivity = 10^(slider6/20);
Retrig = ceil((slider7/1000)*srate); 
det_velo_smpls = (slider8/1000)*srate;

// -- MIDI sliders - values ------------


@block
pos = 0; // reset pos

// -- if pitch changed, send prev note off -------
note_pitch != slider9 + 36 ? (
  note_off ? midisend(trig_pos, $x80, note_pitch, 0); // prev note off(if need)
  note_off = 0;
  note_pitch = slider9 + 36;
);

note_len = 60 /(tempo*(2^slider10));
note_len_smpls = ceil(note_len*srate);

@sample
//----------------------------------------------------------------------------//
// == MAIN Trigger Code ===================================================== //
//----------------------------------------------------------------------------//

// -- Get Input ---------------------
input = (spl0+spl1)/2 * In_gain; // channels sum
envIn = abs(input); // abs input value for enelopes etc
// -- Dry Out -----------------------
spl0*=Dry_Out; //or use v2 spl0 = 0
spl1*=Dry_Out; //or use v2 spl1 = 0


// -- Env followers ------------------------------
envOut1 < envIn ? ( // fast enelope
  envOut1 = envIn + ga1*(envOut1-envIn)
) : (
  envOut1 = envIn + gr1*(envOut1-envIn) 
);     

envOut2 < envIn ? ( // slow enelope
  envOut2 = envIn + ga2*(envOut2-envIn)
) : (
  envOut2 = envIn + gr2*(envOut2-envIn) 
);

// -- Trigger ------------------------------------ 
retrig_cnt > Retrig ? (
  envOut1 > Threshold && envOut1/envOut2 > Sensitivity ? (
    Trig = 1;
    retrig_cnt = 0;
    smpl_cnt = 0;
    peak_smpl = 0;
  );                
) : (           
  envOut2 = envOut1; // уравнивает огибающие
  retrig_cnt+=1;
);

// -- Get input peak smpl(for midi-velocity) -----
Trig ? (
  smpl_cnt < det_velo_smpls ? (
    peak_smpl = max(peak_smpl, envIn);
    smpl_cnt+=1;
  ) : (
  Trig = 0; // reset Trig
  trig_pos = pos-det_velo_smpls; 
  trig_pos < 0 ? trig_pos = 0;   // 0 = compromiss value
  note_off ? midisend(trig_pos, $x80, note_pitch, 0);   // prev note off(if need)
  // -- Scale velo, Send note -----------
  note_velo = ceil( min(crv.Curve_App_to_Val(peak_smpl)*127, 127) ); // Apply curve to value
  midisend(trig_pos, $x90, note_pitch, note_velo );     // new note on
  trig_mrk = note_velo/127;  // for gfx 
  note_off = 1;     // need note off
  );
); 

// -- Send note off ------------------------------
note_off ? (
  note_off+=1;      // count length(in samples)
  note_off > note_len_smpls ? (
    midisend(trig_pos, $x80, note_pitch, 0); // current note off
    note_off = 0;
  );
); 

pos+=1; // update pos

// ========================================================================== //
  


// == For GFX =========================================== //
wave.Build(input, trig_mrk); // args = sample input and trig velo(if>0)
trig_mrk = 0; // reset trig_mrk


@gfx 1084 300

mouse_cap&1 && !last_mouse_cap&1 ? (
  mouse_ox = mouse_x; mouse_oy = mouse_y;
);


//-- Draw Wave and Curve ------------------
wave.redraw ? (
  wave.Draw_waveform(Threshold); // draw
  wave.redraw = 0; // reset redraw state
); 

crv.Curve_Draw();

//-----------------------------------------

last_mouse_cap = mouse_cap;
mouse_last_x = mouse_x;
mouse_last_y = mouse_y;

char = gfx_getchar(); // -- без него не пашет перехват mod-keys!



