desc:new effect

slider1:0<0,100,1>-parameter1
slider2:0<0,100,1>-parameter2
slider3:0<0,100,1>-parameter3
slider4:0<0,100,1>-parameter4
slider5:0<0,100,1>-parameter5

@init
str = 
"abc
def"; 
"Mousewheel - Change Time Range(buffer length), aka Horizontal zoom. 
Click&Drag(up/down) - Vertical zoom.
Click&Drag(left/right) on Pause - Change offset.
Middle Click - Pause/Unpause.

Midi Pitch Sync Mode:
The plugin automatically sets the correct buffer-time, depending on the pitch of the input MIDI-note. 
This is useful for waveform analysis when using synths.
TimeLoop Sync Mode:
The plugin automatically adapts to the selected range.
Accurate to sample.
Tempo Sync Mode:
The plugin automatically adapts to the Host Tempo.
Free Sync Mode:
Sync disabled.

==========================
Mousewheel - Change Time Range(buffer length), aka Horizontal zoom. 
Click&Drag(up/down) - Vertical zoom.
Click&Drag(left/right) on Pause - Change offset.
Middle Click - Pause/Unpause.

Midi Pitch Sync Mode:
The plugin automatically sets the correct buffer-time, depending on the pitch of the input MIDI-note. 
This is useful for waveform analysis when using synths.
TimeLoop Sync Mode:
The plugin automatically adapts to the selected range.
Accurate to sample.
Tempo Sync Mode:
The plugin automatically adapts to the Host Tempo.
Free Sync Mode:
Sync disabled.
==========================
Mousewheel - Change Time Range(buffer length), aka Horizontal zoom. 
Click&Drag(up/down) - Vertical zoom.
Click&Drag(left/right) on Pause - Change offset.
Middle Click - Pause/Unpause.

Midi Pitch Sync Mode:
The plugin automatically sets the correct buffer-time, depending on the pitch of the input MIDI-note. 
This is useful for waveform analysis when using synths.
TimeLoop Sync Mode:
The plugin automatically adapts to the selected range.
Accurate to sample.
Tempo Sync Mode:
The plugin automatically adapts to the Host Tempo.
Free Sync Mode:
Sync disabled.";

function string_GetLines(str) // each char
(
  i = 0;
  lines = 1;
  loop(strlen(str),
    c = str_getchar(str,i);
    c == 10 ? lines += 1;
    i+=1;
  );

);

function gfx_draw_str_lines(str) // each char
(
  i = 0;
  cur_line = 0;
  start_char = end_char = -1;
  while((c = str_getchar(str, i)) && (start_char ==-1 || end_char == -1)) (
    c == 10 ? cur_line += 1;
    
    cur_line == start_line ? start_char = i;
    cur_line == end_line+1 ? end_char = i;    
    i+=1;
  );
  
);

function gfx_drawstr2(str) // each char
(
  string_GetLines(str);
  
  wnd_h = gfx_h;
  start_line -= sign(mouse_wheel)*2;
  start_line = max(start_line, 0);
  mouse_wheel = 0;
  max_lines = floor(wnd_h/gfx_texth)-2;
  end_line = start_line + max_lines;
  end_line > lines ? (end_line = lines; start_line = end_line - max_lines);
  
  gfx_draw_str_lines(str);


);

@slider


@block



@gfx 400 400
gfx_setfont(1,"Tahoma",17);
gfx_set(0.07); // bg color
gfx_rect(0, 0, gfx_w, gfx_h);

//150; 200; 100; a = 1; // info txt color
gfx_set(0.588, 0.784, 0.392);
gfx_a = 0.2;
gfx_rect(0,0,gfx_w,gfx_h,0);
gfx_a = 0.8;

//----------------------------------------
/*
gfx_x = gfx_texth;
gfx_y = gfx_texth;
start = time_precise();
gfx_drawstr(str);
process_time = time_precise()-start;
gfx_x = gfx_w - 240;
gfx_y = gfx_h - 60;
gfx_drawnumber(process_time,6);
gfx_drawstr(" - Full Str drawing time");
//*/
//----------------------------------------
gfx_x = gfx_texth;
gfx_y = gfx_texth;
start = time_precise();
gfx_drawstr2(str);
process_time = time_precise()-start;
gfx_x = gfx_w - 240;
gfx_y = gfx_h - 40;
gfx_drawnumber(process_time,6);
gfx_drawstr(" - Chars drawing time");

gfx_x = gfx_w - 20; 
gfx_y = 4;
gfx_drawstr("X");

